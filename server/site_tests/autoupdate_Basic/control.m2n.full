# Copyright 2021 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

AUTHOR = "dhaddock, Chromium OS"
NAME = "autoupdate_Basic.m2n.full"
TIME = "MEDIUM"
PURPOSE = "Tests an M-to-N update with Nebraska."
TEST_CATEGORY = "Functional"
TEST_CLASS = "platform"
TEST_TYPE = "server"
ATTRIBUTES = "suite:bvt-inline"
JOB_RETRIES = 2
PY_VERSION = 3
DOC = """
This tests an M-to-N update. That means it will update from the current stable
version for this board to ToT. This test will be used in the CQ to ensure
changes don't break autoupdate.

In the lab, a job_repo_url will be passed directly to the test. It contains
information about the build to use and the IP address of lab cache server to
download update payloads from. Local runs can use cache servers as well but
the setup is fairly complicated.

M2N tests require lab cache server access to provision the source stable build,
so they are not easy to run locally. The simplest alternative is to flash a
stable build to the DUT yourself (such as with `cros flash`) and run the
test with the `running_at_desk` and `build` args specified.

If you have lab cache server SSH set up and a valid list of IPs in your
shadow_config.ini, you can run this test locally with a job_repo_url.

Example usage:

With cache server access and a job_repo_url:
test_that <DUT> autoupdate_Basic.m2n.full --args="job_repo_url='http://<IP>:<port>/static/<board>-release/RXX-XXXX.X.X/autotest/packages'"

Without one, both of these args are required. You have to flash the source
version yourself before running this:
test_that <DUT> autoupdate_Basic.m2n.full --board=<board> --args="running_at_desk=True build=R102-14643.0.0"

"""

from autotest_lib.client.common_lib import utils
args_dict = utils.args_to_dict(args)

def run(machine):
    host = hosts.create_host(machine)
    job.run_test('autoupdate_Basic', host=host, full_payload=True,
    		 m2n=True, **args_dict)

job.parallel_simple(run, machines)
