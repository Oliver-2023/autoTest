# Copyright 2022 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

AUTHOR = 'ChromeOS PVS Team'
NAME = 'pvs_Sequence.ThermalQualDischargingThermalLoad'
PURPOSE = 'Validate thermal stability while discharging, in a thermal load'
CRITERIA = 'This test is a benchmark.'
TIME = 'LENGTHY'
TEST_CATEGORY = 'Benchmark'
TEST_CLASS = 'pvs'
TEST_TYPE = 'server'
ATTRIBUTES = ''
PY_VERSION = 3
DOC = '''
This is the PVS sequence to validate thermal stability in a thermal load
(state: discharging)
'''

import datetime

from autotest_lib.server import utils

args_dict = utils.args_to_dict(args)
servo_args = hosts.CrosHost.get_servo_arguments(args_dict)

HOURS=60*60
pdash_note = args_dict.get('pdash_note',
                           NAME + '_' + datetime.datetime.utcnow().isoformat())

SEQUENCE = [
    # power_BatteryDrain and _BatteryCharge both called to validate
    # that we're starting at 70% each time
    ('power_BatteryDrain', {
        'force_discharge' : True, 'drain_to_percent' : 70,
        'drain_timeout': 5 * HOURS}, False),
    ('power_BatteryCharge', {
        'percent_target_charge' : 70,
        'max_run_time': 5 * HOURS}, False),
    ('power_WaitForCoolDown', {}, False),
    ('power_ThermalLoad', {
        'force_discharge': True, 'pdash_note': pdash_note}, False),
    ('power_Speedometer2', {'pdash_note': pdash_note}, False)
]

def run(machine):
    # Setup the client machine.
    host = hosts.create_host(machine, servo_args=servo_args)

    # run the pvs_Sequence wrapper, with the input of the SEQUENCE
    # defined above
    job.run_test('pvs_Sequence',
                           tag=NAME.split('.')[1],
                           host=host,
                           sequence=SEQUENCE)

parallel_simple(run, machines)