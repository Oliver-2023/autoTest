# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

AUTHOR = 'The ChromiumOS Authors'
NAME = 'tast.cellular-ota-perf-stable'
TIME = 'MEDIUM'
TEST_TYPE = 'Server'
ATTRIBUTES = 'suite:cellular_ota_perf'
MAX_RESULT_SIZE_KB = 1024 * 1024
PY_VERSION = 3

# tast.py uses binaries installed from autotest_server_package.tar.bz2.
REQUIRE_SSP = True

DOC = '''
Run the stable Tast tests which verify Cellular performance.

"group:cellular_crosbolt" indicates that the test runs on DUTs with a Cellular modem.
"cellular_crosbolt_sim_active": Used to select tests that require a sim card .
"cellular_crosbolt_unstable": Unstable tests that will be excluded from this suite.
"cellular_crosbolt_perf_nightly": indicates that the test runs on DUT nightly
"cellular_crosbolt_carrier_*": indicates that the test should run on specific carrier.

Tast is an integration-testing framework analagous to the test-running portion
of Autotest. See https://chromium.googlesource.com/chromiumos/platform/tast/ for
more information.

See http://go/tast-failures for information about investigating failures.
'''
import json
import logging
import tempfile
import yaml

from autotest_lib.utils import labellib

def run(machine):
    host = hosts.create_host(machine)
    logging.info('labels: %s', host.host_info_store.get().labels)
    labels = labellib.LabelsMapping(host.host_info_store.get().labels)
    logging.info('labels carrier: %s',labels.get('carrier', 'local'))
    exprs = '("group:cellular_crosbolt" && "cellular_crosbolt_perf_nightly" && "cellular_crosbolt_sim_active" && !"cellular_crosbolt_unstable" && "cellular_crosbolt_carrier_%s")' % (labels.get('carrier', 'local'))
    with tempfile.NamedTemporaryFile(suffix='.yaml', mode='w+') as temp_file:
        host_info = host.host_info_store.get()
        yaml.safe_dump({'autotest_host_info_labels':
                        json.dumps(host_info.labels)},
                        stream=temp_file)
        temp_file.flush()
        job.run_test('tast',
                    host=host,
                    test_exprs=[exprs],
                    ignore_test_failures=True, max_run_sec=10800,
                    command_args=args,
                    varsfiles=[temp_file.name])

parallel_simple(run, machines)
