# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import logging

from autotest_lib.server.cros import chrome_sideloader
from autotest_lib.server import utils

AUTHOR = 'ChromeOS SW Engprod Team (chromeos-sw-engprod@google.com)'
METADATA = {
    'contacts': ['chromeos-sw-engprod@google.com'],
    'bug_component': 'b:1034523', # ChromeOS > Test > Harness > Tauto
    'criteria': 'Nearby CrOS to Phone test with sideloaded Chrome',
    'hw_agnostic': False
}
NAME = 'tast.nearby-share-cq-chrome-from-tls'
TIME = 'MEDIUM'
TEST_TYPE = 'Server'
MAX_RESULT_SIZE_KB = 1024 * 1024
PY_VERSION = 3

# tast.py uses binaries installed from autotest_server_package.tar.bz2.
REQUIRE_SSP = True

# This mount point controls the version of chrome to use
CHROME_MOUNT_POINT = '/opt/google/chrome'
# Location to put the sideloaded chrome artifacts
CHROME_DIR = '/usr/local/chrome'

DOC = '''
Run the Tast Nearby Share test suite with a custom chrome binary.

This test is used by Chrome builder for Nearby Share CI/CQ purposes.
A chrome builder creates a chrome binary and artifacts,
which is in turn provisioned to the primary CrOS DUT.

Tast tests uses the sideloaded version of chrome.
'''

from autotest_lib.server.cros.crossdevice import cross_device_util

def run(machine):
    # Get host objects for each device.
    host = hosts.create_host(machine)
    companions = hosts.create_companion_hosts(companion_hosts)
    phone = companions[0]
    args_dict = utils.args_to_dict(args)

    logging.info("Running %s on ChromeOS: %s and Phone:%s", NAME,
                 host, phone)

    androidcomp = "android.companions=%s:%s:model" % (phone.associated_hostname, phone.serial_number)


    # Setup primary DUT to use the chrome binary from TLS
    chrome_sideloader.setup_host(host, CHROME_DIR, CHROME_MOUNT_POINT)

    max_run_sec=int(args_dict.get('max_run_sec', 10800))
    retries=int(args_dict.get('retries', 0))

    # Register a clean up callback to reset the chrome mount.
    def cleanup():
      chrome_sideloader.cleanup_host(host, CHROME_DIR, CHROME_MOUNT_POINT)
    job.add_post_run_hook(cleanup)

    job.run_test('tast',
                 host=host,
                 test_exprs=['("group:cross-device" && "cross-device_nearbyshare" && "cross-device_cq")'],
                 ignore_test_failures=True,
                 max_run_sec=max_run_sec,
                 command_args=args,
                 varslist=[androidcomp],
                 clear_tpm=False,
                 retries=retries)
parallel_simple(run, machines)
