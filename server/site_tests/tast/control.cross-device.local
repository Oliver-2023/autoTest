# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

AUTHOR = 'ChromeOS SW Engprod Team (chromeos-sw-engprod@google.com)'
NAME = 'tast.cross-device.local'
METADATA = {
    'contacts': ['tauto-core@google.com'],
    'bug_component': 'b:1034523', # ChromeOS > Test > Harness > Tauto
    'criteria': 'Tauto wrapper for specified tast tests',
}
TIME = 'MEDIUM'
TEST_TYPE = 'Server'
MAX_RESULT_SIZE_KB = 1024 * 1024
PY_VERSION = 3

# tast.py uses binaries installed from autotest_server_package.tar.bz2.
REQUIRE_SSP = True

DOC = '''Run the Tast Cross Device test suite with Skylab's Android support locally.

This control file will setup the chromebook and android phone for you if you want to run locally.
Locally means kicking off via test_that to run against either:
1. One of the scheduling units / RF boxes in the lab.
2. At your desk when using the chromebook as a fake labstation.
You can use #2 to test the e2e adb-over-wifi flow without having a labstation at home.
NOTE: Labstations store their adb keys at /var/lib/android_keys (and this gets wiped during login) so you need to click accept manually for the setups adb connection.

You need to specify the wifi network details below that the chromebook and phone should be on together.

These args are expected to be passed to test_that:
--args="phone_station=$PHONE_HOST android_serial=$ANDROID_SERIAL_NUMBER"

When using port forwarding to locahost, the expected args are:
--args="phone_station=localhost phone_station_ssh_port=$FORWARDED_PORT android_serial=$ANDROID_SERIAL_NUMBER"

You also need to specify the test_exprs for the Cross Device feature or area or you want to test.
'''

from autotest_lib.server import utils
from autotest_lib.server.cros.crossdevice import cross_device_util

def run(machine):
    # Get host objects for each device.
    host = hosts.create_host(machine)
    args_dict = utils.args_to_dict(args)
    android_args = hosts.AndroidHost.get_android_arguments(args_dict)
    phone = hosts.AndroidHost('local_phone', android_args=android_args)

    androidcomp = "android.companions=%s:%s:model" % (phone.associated_hostname, phone.serial_number)

    job.run_test('tast',
                 host=host,
                 test_exprs=['("group:cross-device" && "<cross-device_FEATURE NAME HERE>)'],
                 ignore_test_failures=True, max_run_sec=10800,
                 command_args=args,
                 varslist=[androidcomp])
parallel_simple(run, machines)
