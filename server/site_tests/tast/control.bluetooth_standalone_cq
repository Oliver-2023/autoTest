# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from autotest_lib.client.common_lib import utils
from autotest_lib.server.site_tests.tast import tast
import autotest_lib.server.cros.bluetooth.bluetooth_control_file_utils as bt_control_utils

AUTHOR = 'ChromiumOS team'
NAME = 'tast.bluetooth.standalone_cq'
TIME = 'MEDIUM'
TEST_TYPE = 'Server'
ATTRIBUTES = 'suite:bluetooth_standalone_cq'
DEPENDENCIES = 'bluetooth'
MAX_RESULT_SIZE_KB = 1024 * 1024
PY_VERSION = 3
REQUIRE_SSP = True

METADATA = {
    'contacts': ['chromeos-bt-team@google.com'],
    # ChromeOS > Platform > Connectivity > Bluetooth
    'bug_component': 'b:167317',
    'criteria': 'All stable bluetooth CQ tests that do not need a peer device',
    'hw_agnostic': False,
}

DOC = '''
Run the stable Tast tests part of the the bluetooth_standalone_cq suite.

Tast tests for this suite are identified by the 'bluetooth_sa_cq' attribute.

This suite contains standalone bluetooth tests (requires only DUT) to be run in
CQ..

More documentation available at
https://g3doc.corp.google.com/company/teams/chrome/ops/chromeos/engprod/connectivity/bluetooth/automated_tests_and_lab.md?cl=head#test-suites

Contact: chromeos-bluetooth-engprod@google.com or
         chromeos-bt-team@google.com

Tast is an integration-testing framework analogous to the test-running portion
of Autotest. See https://chromium.googlesource.com/chromiumos/platform/tast/ for
more information.

See http://go/tast-failures for information about investigating failures.

This runs all non-flaky bluetooth tast tests that do not require a btpeer. Tests
that require one or more btpeers are not run.
'''

command_args, varslist = tast.split_arguments(args)
args_dict = utils.args_to_dict(args)
servo_args = hosts.CrosHost.get_servo_arguments(args_dict)

def run(machine):
    host = hosts.create_host(machine, servo_args=servo_args)
    btpeer_count_attribute_expression = bt_control_utils.build_tast_btpeer_count_attribute_test_expression(0)
    tast_test_expr = '("group:bluetooth" && !bluetooth_flaky && bluetooth_sa_cq && %s)' % btpeer_count_attribute_expression
    job.run_test('tast',
                 host=host,
                 test_exprs=[tast_test_expr],
                 ignore_test_failures=False,
                 max_run_sec=10800,
                 command_args=command_args,
                 varslist=varslist)

parallel_simple(run, machines)
