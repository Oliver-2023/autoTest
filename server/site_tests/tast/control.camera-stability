# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from autotest_lib.client.common_lib import utils

AUTHOR = "ChromeOS Team"
NAME = 'tast.camera-stability'
METADATA = {
    "contacts": ["chromeos-camera-kernel@google.com",
                 "chromeos-camera-eng@google.com",
                 "ribalda@chromium.org"],
    # ChromeOS > Platform > Technologies > Camera > Kernel
    "bug_component": "b:1093480",
    "criteria": ("Run camera stability tests on all boards/models on ToT."
                 " Tests are manually monitored by the camera sheriff."),
    "hw_agnostic": False
}
TIME = 'SHORT'
TEST_TYPE = 'Server'
DEPENDENCIES = 'servo_state:WORKING'
ATTRIBUTES = 'suite:camera-stability'
MAX_RESULT_SIZE_KB = 1024 * 1024
PY_VERSION = 3
JOB_RETRIES = 0  # Do not retry informational tests.

# tast.py uses binaries installed from autotest_server_package.tar.bz2.
REQUIRE_SSP = True

DOC = '''
Run the Tast Camera stability test suite.

Tast is an integration-testing framework analogous to the test-running portion
of Autotest. See https://chromium.googlesource.com/chromiumos/platform/tast/ for
more information.

This test validates that the camera modules can withstand the intensive use on
the lab, so we can preemptively act on consumer errors before they happen.

This test do not block the CQ and is daily monitored by the camera sheriff.

See http://go/tast-failures for information about investigating failures.
'''

args_dict = utils.args_to_dict(args)
assert 'servo_state:WORKING' in DEPENDENCIES
servo_args = hosts.CrosHost.get_servo_arguments(args_dict)

def run(machine):
    job.run_test('tast',
                 host=hosts.create_host(machine, servo_args=servo_args),
                 test_exprs=['("group:camera-stability")'],
                 ignore_test_failures=True,
                 max_run_sec=60*60,
                 command_args=args,
                 clear_tpm=True)

parallel_simple(run, machines)
